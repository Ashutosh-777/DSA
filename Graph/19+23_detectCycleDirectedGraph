//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution {
  private:
  bool dfs(int start,vector<int> adj[],vector<int> &vis,int path[]){
      vis[start]=1;
      path[start]=1;
      for(auto it: adj[start]){
          if(!vis[it]){
              if(dfs(it,adj,vis,path)==true) return true;
          }else{
              if(path[it]==1){
                  return true;
              }
          }
      }
        path[start]=0;
      return false;
  }
  bool bfs(int v,vector<int> adj[]){
      queue<int> q;
      vector<int> ans;
      int indegree[v]={0};
      for(int i=0;i<v;i++){
          for(auto it:adj[i]){
              indegree[it]++;
          }
      }
      for(int i=0;i<v;i++){
          if(indegree[i]==0) q.push(i);
      }
      int count=0;
      while(q.size()!=0){
          int front  = q.front();
          q.pop();
          count++;
          ans.push_back(front);
          for(auto it: adj[front]){
              indegree[it]--;
              if(indegree[it]==0){
                  q.push(it);
              }
          }
      }
    //   if(ans.size()==v) return false;
    //   return true;
      return count==v? 0:1;
     
  }
    // TOPO SORT KAHN'S ALGORITHM
    // bool  bfs(int v,vector<int> adj[]){
    //     vector<int> topo;
    //     int indegree[v]={0};
    //     for(int i=0;i<v;i++){
    //         for(auto it : adj[i]){
    //             indegree[it]++;
    //         }
    //     }
    //     queue<int> q;
    //     for(int i=0;i<v;i++){
    //         if(indegree[i]==0){
    //             q.push(i);
    //         }
    //     }
    //     while(!q.empty()){
    //         int front = q.front();
    //         q.pop();
    //         topo.push_back(front);
    //         for(auto it : adj[front]){
    //             indegree[it]--;
    //             if(indegree[it]==0) {
    //                 q.push(it);
    //             }
    //         }
    //     }
    //     return topo.size()==v ? false : true;
    // }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int v, vector<int> adj[]) {
        // vector<int> vis(v,0);
        //     int path[v]={0};
        // for(int i=0;i<v;i++){
        //     if(!vis[i]){
        //         if(dfs(i,adj,vis,path)) return true;
        //     }
        // }
        // return false;
        return bfs(v,adj);
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends